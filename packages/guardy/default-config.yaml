# Default configuration for Guardy
# This file is embedded in the binary and provides fallback values

general:
  debug: false
  color: true
  interactive: true

hooks:
  pre-commit:
    enabled: true
    builtin:
      - scan_secrets   # Run built-in secret scanner
    custom: []
    # Example custom commands (uncomment to use):
    # custom:
    #   - command: "cargo fmt --check"
    #     description: "Check Rust formatting"
    #     fail_on_error: true
    #   - command: "cargo clippy -- -D warnings"
    #     description: "Run clippy linter"
    #     fail_on_error: true

  commit-msg:
    enabled: false  # Set to true when you add custom commands
    builtin: []
    custom: []
    # Example: Validate conventional commits
    # custom:
    #   - command: "grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+' $1"
    #     description: "Validate commit message format"
    #     fail_on_error: true

  post-checkout:
    enabled: false
    builtin: []
    custom: []
    # Example: Install dependencies after checkout
    # custom:
    #   - command: "pnpm install"
    #     description: "Install dependencies"
    #     fail_on_error: false

  pre-push:
    enabled: false
    builtin: []
    custom: []
    # Example: Run tests before push
    # custom:
    #   - command: "cargo test"
    #     description: "Run all tests"
    #     fail_on_error: true

security:
  # Secret detection patterns (regex)
  patterns:
    - "sk-[a-zA-Z0-9]{48}"           # OpenAI API keys
    - "ghp_[a-zA-Z0-9]{36}"          # GitHub personal access tokens
    - "ey[a-zA-Z0-9]{20,}"           # JWT tokens
    - "['\"'][a-zA-Z0-9+/]{32,}['\"]" # Base64 encoded secrets
  # Files to exclude from secret scanning
  exclude_files:
    - "*.lock"
    - "*.log"
    - ".husky/*"

branch_protection:
  # Protected branches
  protected_branches:
    - main
    - master
    - develop
  allow_direct_commits: false

git_crypt:
  # Git-crypt integration
  enabled: true
  required_files: []  # Files that must be encrypted

formatting:
  # Code formatting settings
  enabled: true
  command: "nx format:write --uncommitted"
  auto_fix: false  # Whether to auto-stage formatted files

package_manager:
  # Package manager preferences
  preferred: pnpm  # pnpm, npm, yarn
  auto_install: true  # Auto-install on checkout

mcp:
  # MCP server settings
  port: 8080
  host: "127.0.0.1"
  enabled: false
  tools:
    - git-status
    - hook-run
    - security-scan

scanner:
  # Processing mode settings
  mode: auto               # "auto", "parallel", or "sequential" (auto = smart default)
  max_threads: 0           # 0 = auto-detect (75% of CPU cores), or specify exact number
  thread_percentage: 75    # Percentage of CPU cores to use (1-100)
  min_files_for_parallel: 50 # Minimum files before auto mode uses parallel processing

  # Scanner ignore mechanisms
  ignore_paths:
    # General test directories
    - "tests/*"
    - "testdata/*"
    - "__tests__/*"
    - "test/*"
    # Rust test files
    - "*_test.rs"
    - "test_*.rs"
    # Python test files
    - "test_*.py"
    - "*_test.py"
    # TypeScript/JavaScript test files
    - "*.test.ts"
    - "*.test.js"
    - "*.spec.ts"
    - "*.spec.js"
    # Git objects and internal files (binary data)
    - ".git/objects/**"
    - ".git_disabled/**"
    - ".git/refs/**"
    - ".git/logs/**"
    - ".git/index"
    - "**/.git/objects/**"
    - "**/.git_disabled/**"

  ignore_patterns:
    - "# TEST_SECRET:"
    - "DEMO_KEY_"
    - "FAKE_"

  ignore_comments:
    - "guardy:ignore"
    - "guardy:ignore-line"
    - "guardy:ignore-next"

  # Intelligent test code detection
  ignore_test_code: true
  test_attributes:
    # Rust test patterns
    - "#[*test]"
    - "#[bench]"
    - "#[cfg(test)]"
    # Python test patterns
    - "def test_*"
    - "class Test*"
    - "@pytest.*"
    # TypeScript/JavaScript test patterns
    - "it(*"
    - "test(*"
    - "describe(*"

  test_modules:
    # Rust
    - "mod tests {"
    - "mod test {"
    # Python
    - "class Test"
    # TypeScript/JavaScript
    - "describe("
    - "__tests__"

external_tools:
  # External tool paths (auto-detected if not specified)
  git_crypt: git-crypt
  nx: nx
  pnpm: pnpm

# Protected Sync Configuration (for new feature)
sync:
  repos: []
  # Example repo configuration:
  # - name: repokit
  #   repo: github.com/deepbrain/repokit
  #   version: v1.2.3
  #   source_path: "."
  #   dest_path: "."
  #   include:
  #     - "*"
  #   exclude:
  #     - ".git/"
  #     - "target/"
  #     - "*.log"
  #   protected: true

  protection:
    auto_protect_synced: true
    block_modifications: true
