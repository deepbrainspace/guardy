//! Uninstall command implementation
//!
//! Removes Guardy from the current repository by removing git hooks and 
//! optionally removing the configuration file.

use crate::cli::Output;
use crate::shared::{get_current_dir, FileUtils};
use anyhow::Result;
use std::fs;
use std::path::Path;

/// Execute the uninstall command
pub async fn execute(force: bool, output: &Output) -> Result<()> {
    let start_time = std::time::Instant::now();
    output.header("🗑️ Uninstalling Guardy");
    
    let current_dir = get_current_dir()?;
    
    // Check if we're in a git repository
    if !FileUtils::is_git_repository(&current_dir) {
        output.error("Not a git repository");
        output.info("Run this command in a git repository to uninstall Guardy");
        return Ok(());
    }
    
    // Use workflow steps for better progress indication
    if output.is_verbose() {
        output.workflow_step(1, 3, "Removing git hooks", "🪝");
    }
    
    let mut items_removed = 0;
    
    // Remove git hooks
    let hooks_removed = remove_git_hooks(&current_dir, output)?;
    items_removed += hooks_removed;
    
    if output.is_verbose() {
        output.workflow_step(2, 3, "Checking configuration files", "⚙️");
    }
    
    // Check for configuration file
    let config_path = current_dir.join("guardy.yml");
    if config_path.exists() {
        if force {
            fs::remove_file(&config_path)?;
            output.success("Removed guardy.yml configuration file");
            items_removed += 1;
        } else {
            output.warning("Configuration file found: guardy.yml");
            output.info("Use --force to remove configuration file");
            output.info("Or manually remove it if you no longer need it");
        }
    }
    
    if output.is_verbose() {
        output.workflow_step(3, 3, "Finalizing uninstall", "✨");
    }
    
    // Show completion summary
    let duration = start_time.elapsed();
    
    if items_removed > 0 {
        if output.is_verbose() {
            output.completion_summary("Uninstall", duration, true);
        }
        output.success(&format!("Guardy uninstalled successfully - removed {} items", items_removed));
        
        if !force && config_path.exists() {
            output.blank_line();
            output.info("Configuration file preserved");
            output.info("Run 'guardy uninstall --force' to remove configuration file");
        }
    } else {
        output.info("No Guardy components found to remove");
        output.info("Guardy was not installed in this repository");
    }
    
    Ok(())
}

/// Remove git hooks installed by Guardy
fn remove_git_hooks(current_dir: &Path, output: &Output) -> Result<usize> {
    let hooks_dir = current_dir.join(".git/hooks");
    
    if !hooks_dir.exists() {
        output.info("No git hooks directory found");
        return Ok(0);
    }
    
    let hooks = ["pre-commit", "commit-msg", "pre-push"];
    let mut removed_count = 0;
    
    for hook_name in &hooks {
        let hook_path = hooks_dir.join(hook_name);
        
        if hook_path.exists() {
            // Check if it's a Guardy hook
            if let Ok(content) = fs::read_to_string(&hook_path) {
                if content.contains("Generated by Guardy") || content.contains("guardy hooks run") {
                    fs::remove_file(&hook_path)?;
                    output.success(&format!("Removed {} hook", hook_name));
                    removed_count += 1;
                } else {
                    output.warning(&format!("{} hook exists but not managed by Guardy", hook_name));
                    output.info(&format!("  Skipping removal of {}", hook_name));
                }
            } else {
                output.warning(&format!("{} hook exists but cannot be read", hook_name));
                output.info(&format!("  Skipping removal of {}", hook_name));
            }
        }
    }
    
    if removed_count > 0 {
        output.success(&format!("Removed {} Guardy git hooks", removed_count));
    } else {
        output.info("No Guardy git hooks found");
    }
    
    Ok(removed_count)
}