# Advanced Guardy Configuration Example
# This shows comprehensive configuration options including custom formatters

security:
  secret_detection: true
  patterns:
    # AWS Credentials
    - name: AWS Access Key
      regex: AKIA[0-9A-Z]{16}
      severity: Critical
      description: AWS Access Key ID
      enabled: true
    - name: AWS Secret Key
      regex: '[0-9a-zA-Z/+]{40}'
      severity: Critical
      description: AWS Secret Access Key
      enabled: true
    
    # API Keys
    - name: Generic API Key
      regex: (?i)(api[_-]?key|apikey)\s*[=:]\s*[a-zA-Z0-9_-]{16,}
      severity: Critical
      description: Generic API key pattern
      enabled: true
    
    # Private Keys
    - name: Private Key
      regex: '-----BEGIN [A-Z]+ PRIVATE KEY-----'
      severity: Critical
      description: Private key header
      enabled: true
    
    # JWT Tokens
    - name: JSON Web Token
      regex: eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*
      severity: Critical
      description: JWT token pattern
      enabled: true
    
    # GitHub Personal Access Tokens
    - name: GitHub Token
      regex: ghp_[a-zA-Z0-9]{36}
      severity: Critical
      description: GitHub Personal Access Token
      enabled: true
    
    # OpenAI API Keys
    - name: OpenAI API Key
      regex: sk-[a-zA-Z0-9]{20,}
      severity: Critical
      description: OpenAI API key
      enabled: true
  
  exclude_patterns:
    - '*.tmp'
    - '*.temp'
    - '*.log'
    - 'node_modules/**'
    - '.git/**'
    - 'target/**'
    - 'dist/**'
    - 'build/**'
  
  use_gitignore: true
  protected_branches:
    - main
    - master
    - develop
    - release/*
  git_crypt: false

hooks:
  pre_commit: true
  commit_msg: true
  pre_push: true
  timeout: 300

mcp:
  enabled: true
  port: 8080
  host: localhost
  daemon: false

tools:
  auto_detect: true
  auto_install: false  # Require explicit opt-in for security
  
  formatters:
    # Rust formatters
    - name: rustfmt
      command: cargo fmt
      patterns:
        - "**/*.rs"
      check_command: rustfmt --version
      install:
        cargo: rustup component add rustfmt
        manual: "Install Rust toolchain: https://rustup.rs/"
    
    # Alternative Rust formatter: prettier-please (Dioxus)
    - name: prettier-please
      command: prettier-please --write
      patterns:
        - "**/*.rs"
      check_command: prettier-please --version
      install:
        cargo: cargo install prettier-please
        manual: "Install with: cargo install prettier-please"
    
    # JavaScript/TypeScript formatters
    - name: prettier
      command: npx prettier --write
      patterns:
        - "**/*.js"
        - "**/*.ts"
        - "**/*.jsx"
        - "**/*.tsx"
        - "**/*.json"
        - "**/*.css"
        - "**/*.html"
        - "**/*.md"
      check_command: npx prettier --version
      install:
        npm: npm install -g prettier
        brew: brew install prettier
        manual: "Install Node.js then run: npm install -g prettier"
    
    - name: biome
      command: biome format --write
      patterns:
        - "**/*.js"
        - "**/*.ts"
        - "**/*.jsx"
        - "**/*.tsx"
        - "**/*.json"
      check_command: biome --version
      install:
        npm: npm install -g @biomejs/biome
        cargo: cargo install biome
        manual: "Install with: npm install -g @biomejs/biome"
    
    # Python formatters
    - name: black
      command: black
      patterns:
        - "**/*.py"
      check_command: black --version
      install:
        cargo: cargo install black
        apt: apt install black
        brew: brew install black
        manual: "Install with: pip install black"
    
    - name: ruff
      command: ruff format
      patterns:
        - "**/*.py"
      check_command: ruff --version
      install:
        cargo: cargo install ruff
        apt: apt install ruff
        brew: brew install ruff
        manual: "Install with: pip install ruff"
    
    # Go formatters
    - name: gofmt
      command: gofmt -w
      patterns:
        - "**/*.go"
      check_command: gofmt -help
      install:
        brew: brew install go
        apt: apt install golang-go
        manual: "Install Go: https://golang.org/dl/"
    
    # C/C++ formatters
    - name: clang-format
      command: clang-format -i
      patterns:
        - "**/*.c"
        - "**/*.cpp"
        - "**/*.h"
        - "**/*.hpp"
      check_command: clang-format --version
      install:
        brew: brew install clang-format
        apt: apt install clang-format
        manual: "Install LLVM/Clang tools"
    
    # Custom formatter example
    - name: custom-formatter
      command: ./scripts/format.sh
      patterns:
        - "**/*.custom"
      check_command: test -f ./scripts/format.sh
      install:
        manual: "Create custom formatting script at ./scripts/format.sh"
  
  linters:
    # Rust linters
    - name: clippy
      command: cargo clippy --all-targets --all-features -- -D warnings
      patterns:
        - "**/*.rs"
      check_command: cargo clippy --version
      install:
        cargo: rustup component add clippy
        manual: "Install Rust toolchain: https://rustup.rs/"
    
    # JavaScript/TypeScript linters
    - name: eslint
      command: npx eslint
      patterns:
        - "**/*.js"
        - "**/*.ts"
        - "**/*.jsx"
        - "**/*.tsx"
      check_command: npx eslint --version
      install:
        npm: npm install -g eslint
        manual: "Install Node.js then run: npm install -g eslint"
    
    # Python linters
    - name: ruff-lint
      command: ruff check
      patterns:
        - "**/*.py"
      check_command: ruff --version
      install:
        cargo: cargo install ruff
        apt: apt install ruff
        brew: brew install ruff
        manual: "Install with: pip install ruff"
    
    # Go linters
    - name: golangci-lint
      command: golangci-lint run
      patterns:
        - "**/*.go"
      check_command: golangci-lint --version
      install:
        brew: brew install golangci-lint
        manual: "Install: https://golangci-lint.run/usage/install/"
    
    # Shell script linters
    - name: shellcheck
      command: shellcheck
      patterns:
        - "**/*.sh"
        - "**/*.bash"
      check_command: shellcheck --version
      install:
        brew: brew install shellcheck
        apt: apt install shellcheck
        manual: "Install ShellCheck: https://www.shellcheck.net/"