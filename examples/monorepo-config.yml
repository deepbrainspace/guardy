# Monorepo Configuration Example
# This shows how to configure Guardy for a monorepo with multiple languages

security:
  secret_detection: true
  patterns:
    - name: AWS Access Key
      regex: AKIA[0-9A-Z]{16}
      severity: Critical
      description: AWS Access Key ID
      enabled: true
    - name: OpenAI API Key
      regex: sk-[a-zA-Z0-9]{20,}
      severity: Critical
      description: OpenAI API key
      enabled: true
    - name: GitHub Token
      regex: ghp_[a-zA-Z0-9]{36}
      severity: Critical
      description: GitHub Personal Access Token
      enabled: true
  
  exclude_patterns:
    - '*.tmp'
    - '*.temp'
    - 'node_modules/**'
    - 'target/**'
    - 'dist/**'
    - 'build/**'
    - '__pycache__/**'
    - '.next/**'
    - '.nuxt/**'
    - 'venv/**'
    - '.env/**'
  
  use_gitignore: true
  protected_branches:
    - main
    - develop
    - staging
    - production
  git_crypt: false

hooks:
  pre_commit: true
  commit_msg: true
  pre_push: true
  timeout: 600  # Longer timeout for monorepos

mcp:
  enabled: true
  port: 8080
  host: localhost
  daemon: false

tools:
  auto_detect: true
  auto_install: false
  
  formatters:
    # Frontend JavaScript/TypeScript (packages/frontend, apps/web)
    - name: prettier-frontend
      command: npx prettier --write
      patterns:
        - "packages/frontend/**/*.{js,ts,jsx,tsx,json,css,html,md}"
        - "apps/web/**/*.{js,ts,jsx,tsx,json,css,html,md}"
        - "apps/mobile/**/*.{js,ts,jsx,tsx,json}"
        - "libs/ui/**/*.{js,ts,jsx,tsx,json,css}"
      check_command: npx prettier --version
      install:
        npm: npm install -g prettier
        manual: "Install Node.js then run: npm install -g prettier"
    
    # Backend Rust (packages/backend, services/api)
    - name: rustfmt-backend
      command: cargo fmt
      patterns:
        - "packages/backend/**/*.rs"
        - "services/api/**/*.rs"
        - "services/auth/**/*.rs"
        - "libs/core/**/*.rs"
      check_command: rustfmt --version
      install:
        cargo: rustup component add rustfmt
        manual: "Install Rust toolchain: https://rustup.rs/"
    
    # Alternative Rust formatter for specific services
    - name: prettier-please-microservices
      command: prettier-please --write
      patterns:
        - "services/notification/**/*.rs"
        - "services/payment/**/*.rs"
      check_command: prettier-please --version
      install:
        cargo: cargo install prettier-please
        manual: "Install with: cargo install prettier-please"
    
    # Python ML/Data services (packages/ml, services/analytics)
    - name: black-python
      command: black
      patterns:
        - "packages/ml/**/*.py"
        - "services/analytics/**/*.py"
        - "services/data-pipeline/**/*.py"
        - "scripts/**/*.py"
      check_command: black --version
      install:
        cargo: cargo install black
        manual: "Install with: pip install black"
    
    - name: ruff-python
      command: ruff format
      patterns:
        - "packages/ml/**/*.py"
        - "services/analytics/**/*.py"
        - "services/data-pipeline/**/*.py"
      check_command: ruff --version
      install:
        cargo: cargo install ruff
        manual: "Install with: pip install ruff"
    
    # Go microservices (services/gateway, services/cache)
    - name: gofmt-services
      command: gofmt -w
      patterns:
        - "services/gateway/**/*.go"
        - "services/cache/**/*.go"
        - "services/monitoring/**/*.go"
      check_command: gofmt -help
      install:
        brew: brew install go
        manual: "Install Go: https://golang.org/dl/"
    
    # Infrastructure as Code (terraform, kubernetes)
    - name: terraform-fmt
      command: terraform fmt
      patterns:
        - "infrastructure/**/*.tf"
        - "terraform/**/*.tf"
      check_command: terraform version
      install:
        brew: brew install terraform
        manual: "Install Terraform: https://terraform.io/"
    
    # Docker files
    - name: dockerfile-fmt
      command: docker run --rm -i hadolint/hadolint
      patterns:
        - "**/Dockerfile"
        - "**/Dockerfile.*"
      check_command: docker --version
      install:
        brew: brew install hadolint
        manual: "Install Docker and Hadolint"
    
    # Documentation
    - name: prettier-docs
      command: npx prettier --write
      patterns:
        - "docs/**/*.md"
        - "*.md"
        - "**/*.mdx"
      check_command: npx prettier --version
      install:
        npm: npm install -g prettier
        manual: "Install Node.js then run: npm install -g prettier"
  
  linters:
    # Frontend linting
    - name: eslint-frontend
      command: npx eslint
      patterns:
        - "packages/frontend/**/*.{js,ts,jsx,tsx}"
        - "apps/web/**/*.{js,ts,jsx,tsx}"
        - "apps/mobile/**/*.{js,ts,jsx,tsx}"
        - "libs/ui/**/*.{js,ts,jsx,tsx}"
      check_command: npx eslint --version
      install:
        npm: npm install -g eslint
        manual: "Install Node.js then run: npm install -g eslint"
    
    # Backend Rust linting
    - name: clippy-backend
      command: cargo clippy --all-targets --all-features -- -D warnings
      patterns:
        - "packages/backend/**/*.rs"
        - "services/api/**/*.rs"
        - "services/auth/**/*.rs"
        - "libs/core/**/*.rs"
      check_command: cargo clippy --version
      install:
        cargo: rustup component add clippy
        manual: "Install Rust toolchain: https://rustup.rs/"
    
    # Python linting
    - name: ruff-lint-python
      command: ruff check
      patterns:
        - "packages/ml/**/*.py"
        - "services/analytics/**/*.py"
        - "services/data-pipeline/**/*.py"
        - "scripts/**/*.py"
      check_command: ruff --version
      install:
        cargo: cargo install ruff
        manual: "Install with: pip install ruff"
    
    # Go linting
    - name: golangci-lint-services
      command: golangci-lint run
      patterns:
        - "services/gateway/**/*.go"
        - "services/cache/**/*.go"
        - "services/monitoring/**/*.go"
      check_command: golangci-lint --version
      install:
        brew: brew install golangci-lint
        manual: "Install: https://golangci-lint.run/usage/install/"
    
    # Shell scripts
    - name: shellcheck
      command: shellcheck
      patterns:
        - "scripts/**/*.sh"
        - "**/*.sh"
        - "**/*.bash"
      check_command: shellcheck --version
      install:
        brew: brew install shellcheck
        manual: "Install ShellCheck: https://www.shellcheck.net/"
    
    # Docker linting
    - name: hadolint
      command: hadolint
      patterns:
        - "**/Dockerfile"
        - "**/Dockerfile.*"
      check_command: hadolint --version
      install:
        brew: brew install hadolint
        manual: "Install Hadolint: https://github.com/hadolint/hadolint"
    
    # YAML linting
    - name: yamllint
      command: yamllint
      patterns:
        - "**/*.yml"
        - "**/*.yaml"
        - ".github/**/*.yml"
        - "kubernetes/**/*.yaml"
      check_command: yamllint --version
      install:
        brew: brew install yamllint
        manual: "Install with: pip install yamllint"